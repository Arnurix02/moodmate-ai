import 'dart:convert';
import 'package:http/http.dart' as http;

class CerebrasApiService {
  static const String baseUrl = 'https://api.cerebras.ai/v1/chat/completions';
  static const String apiKey =
      'csk-yenfm9jntj43cxxtd3wh9rwfp56jjktv5hth2f6ee39jkk4t';
  static const String model = 'llama3.1-70b';
  static const Duration timeout = Duration(seconds: 60);

  Future<String> sendMessage(
    String message, {
    String? systemPrompt,
    List<Map<String, String>>? conversationHistory,
  }) async {
    try {
      final messages = <Map<String, String>>[];

      if (systemPrompt != null) {
        messages.add({
          'role': 'system',
          'content': systemPrompt,
        });
      }

      // –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      if (conversationHistory != null) {
        messages.addAll(conversationHistory);
      }

      // –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      messages.add({
        'role': 'user',
        'content': message,
      });

      final response = await http
          .post(
            Uri.parse(baseUrl),
            headers: {
              'Authorization': 'Bearer $apiKey',
              'Content-Type': 'application/json',
            },
            body: jsonEncode({
              'model': model,
              'messages': messages,
              'max_completion_tokens': 20000,
              'temperature': 0.7,
              'top_p': 0.8,
              'stream': false,
            }),
          )
          .timeout(timeout);

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final content = data['choices'][0]['message']['content'];
        return content ?? '–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç';
      } else if (response.statusCode == 401) {
        return '–û—à–∏–±–∫–∞ API –∫–ª—é—á–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!';
      } else if (response.statusCode == 429) {
        return '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ! ‚è∞';
      } else {
        return '–û—à–∏–±–∫–∞: ${response.statusCode}';
      }
    } catch (e) {
      print('Error in CerebrasApiService: $e');
      return '–£–ø—Å! –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç üì°';
    }
  }

  Future<String> getMoodSupport(String mood, String language) async {
    final prompts = {
      'ru': '''–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ MoodMate. 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: "$mood".
–î–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –±—É–¥—å –¥–æ–±—Ä—ã–º –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–º.
–ü—Ä–µ–¥–ª–æ–∂–∏ –æ–¥–Ω—É –ø–æ–ª–µ–∑–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.''',
      'en': '''You are a caring AI assistant for teenagers called MoodMate.
User selected mood: "$mood".
Give brief support (2-3 sentences), be kind and understanding.
Suggest one useful activity to improve mood.''',
      'kk': '''–°—ñ–∑ –∂–∞—Å”©—Å–ø—ñ—Ä—ñ–º–¥–µ—Ä “Ø—à—ñ–Ω MoodMate AI –∫”©–º–µ–∫—à—ñ—Å—ñ—Å—ñ–∑.
–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∫”©“£—ñ–ª-–∫“Ø–π—ñ–Ω —Ç–∞“£–¥–∞–¥—ã: "$mood".
“ö—ã—Å“õ–∞ “õ–æ–ª–¥–∞—É –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑ (2-3 —Å”©–π–ª–µ–º), –º–µ–π—ñ—Ä—ñ–º–¥—ñ –∂”ô–Ω–µ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –±–æ–ª—ã“£—ã–∑.
–ö”©“£—ñ–ª-–∫“Ø–π–¥—ñ –∂–∞“õ—Å–∞—Ä—Ç—É “Ø—à—ñ–Ω –±—ñ—Ä –ø–∞–π–¥–∞–ª—ã ”ô—Ä–µ–∫–µ—Ç “±—Å—ã–Ω—ã“£—ã–∑.''',
    };

    return await sendMessage(
      '–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–π—á–∞—Å',
      systemPrompt: prompts[language] ?? prompts['ru'],
    );
  }

  Future<String> chat(
    String message,
    String language,
    List<Map<String, String>> history,
  ) async {
    final systemPrompts = {
      'ru': '''–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ MoodMate –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤.
–ü–æ–º–æ–≥–∞–µ—à—å —É–ª—É—á—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –¥–∞—ë—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–æ–≤–µ—Ç—ã.
–ë—É–¥—å –¥–æ–±—Ä—ã–º, –ø–æ–Ω–∏–º–∞—é—â–∏–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º.
–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).''',
      'en': '''You are a friendly AI assistant MoodMate for teenagers.
Help improve mood, give support and advice.
Be kind, understanding and positive.
Answer briefly and to the point (2-4 sentences).''',
      'kk': '''–°—ñ–∑ –∂–∞—Å”©—Å–ø—ñ—Ä—ñ–º–¥–µ—Ä “Ø—à—ñ–Ω MoodMate –¥–æ—Å—Ç—ã“õ AI –∫”©–º–µ–∫—à—ñ—Å—ñ—Å—ñ–∑.
–ö”©“£—ñ–ª-–∫“Ø–π–¥—ñ –∂–∞“õ—Å–∞—Ä—Ç—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å—ñ“£—ñ–∑, “õ–æ–ª–¥–∞—É –º–µ–Ω –∫–µ“£–µ—Å –±–µ—Ä—ñ“£—ñ–∑.
–ú–µ–π—ñ—Ä—ñ–º–¥—ñ, —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –∂”ô–Ω–µ –∂–∞“ì—ã–º–¥—ã –±–æ–ª—ã“£—ã–∑.
“ö—ã—Å“õ–∞ –∂”ô–Ω–µ –Ω–∞“õ—Ç—ã –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑ (2-4 —Å”©–π–ª–µ–º).''',
    };

    return await sendMessage(
      message,
      systemPrompt: systemPrompts[language] ?? systemPrompts['ru'],
      conversationHistory: history,
    );
  }

  Future<String> analyzeJournal(String entry, String language) async {
    final prompts = {
      'ru': '''–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø–∏—Å—å –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∏ –¥–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.
–û—Ç–º–µ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã.''',
      'en': '''You are a psychologist assistant for teenagers.
Analyze the journal entry and give brief supportive feedback.
Note positive moments.''',
      'kk': '''–°—ñ–∑ –∂–∞—Å”©—Å–ø—ñ—Ä—ñ–º–¥–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –ø—Å–∏—Ö–æ–ª–æ–≥-–∫”©–º–µ–∫—à—ñ—Å—ñ–∑.
–ö“Ø–Ω–¥–µ–ª—ñ–∫ –∂–∞–∑–±–∞—Å—ã–Ω —Ç–∞–ª–¥–∞“£—ã–∑ –∂”ô–Ω–µ “õ—ã—Å“õ–∞ “õ–æ–ª–¥–∞—É—à—ã –∫–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å –±–µ—Ä—ñ“£—ñ–∑.
–û“£ —Å”ô—Ç—Ç–µ—Ä–¥—ñ –∞—Ç–∞–ø ”©—Ç—ñ“£—ñ–∑.''',
    };

    return await sendMessage(
      entry,
      systemPrompt: prompts[language] ?? prompts['ru'],
    );
  }

  Future<bool> checkApiHealth() async {
    try {
      final response = await http
          .post(
            Uri.parse(baseUrl),
            headers: {
              'Authorization': 'Bearer $apiKey',
              'Content-Type': 'application/json',
            },
            body: jsonEncode({
              'model': model,
              'messages': [
                {'role': 'user', 'content': 'test'}
              ],
              'max_completion_tokens': 10,
            }),
          )
          .timeout(const Duration(seconds: 5));

      return response.statusCode == 200;
    } catch (e) {
      return false;
    }
  }
}
